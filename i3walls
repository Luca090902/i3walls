#!/bin/sh

# Manage wallpapers in groups of 'themes'.
# Launch standalone with no argument to manage and assign themes.
# Give a wallpaper image as an argument to add to an existing or new theme.

# Globals
SYMLINKPATH="$HOME/.config/i3/i3walls"
CURRENT_THEME_FILE="${SYMLINKPATH}/current-theme.txt"
THEMES_FILE="${SYMLINKPATH}/current-themes.txt"
CURRENT_THEME_NAME=$(< ${CURRENT_THEME_FILE})
THEMES=$(< ${SYMLINKPATH}/current-themes.txt)
THEME=''
PICTOADD=''
PICSTOADD=''
declare -a PIX

# The program runs in one of two modes - with or without a file path argument.
# If a file is passed in as an argument we ask if it is to be added to a 
# new or existing theme.
if [[ "$1" ]]; then
  DIR="$( cd "$( dirname "$1" )" && pwd )"
  PICTOADD="$1"
  shift
  PICSTOADD=("$@")
  
  PROGS=(
    "add to existing theme"
    "add to new theme"
    "quit"
  )
else
  PROGS=(
    "show current wallpapers"
    "set theme"
    "edit a theme"
    "show themes"
    "new theme"
    "delete theme"
    "quit"
  )
fi

_removeSymLinks() {
  rm "${SYMLINKPATH}/pic_"*
}

_setLinks() {
  COUNT=1
  while read line; do
    LINK="${SYMLINKPATH}/pic_${COUNT}"
    ln -s $line $LINK
    ((COUNT=COUNT+1))
  done < "${SYMLINKPATH}/${CURRENT_THEME_NAME}"

  i3-msg restart
}

_list_choose_theme() {
  echo 'Themes:'
  echo $THEMES
  declare -a THMS=("${THEMES[@]}")
  THEME=$(gum choose $THMS)
  PIX="${SYMLINKPATH}/${THEME}"
}

showCurrentWalls() {
  echo "Current Wallpapers in theme file $CURRENT_THEME_NAME"
  # Give sxiv a file that contains a list of image paths 
  # rather than the list directly.
  PIX="${SYMLINKPATH}/${CURRENT_THEME_NAME}"
  sxiv -it < $PIX
}

setTheme() {
  echo 'Choose Theme:'
  declare -a THMS=("${THEMES[@]}")
  CURRENT_THEME_NAME=$(gum choose $THMS)
  echo "$CURRENT_THEME_NAME" > ${CURRENT_THEME_FILE}

  # Now empty out the old symlinks
  _removeSymLinks
  _setLinks
}

editTheme() {
  echo 'editTheme'
  _list_choose_theme
  $EDITOR $PIX
}

showThemes() {
  _list_choose_theme
  sxiv -it < $PIX
}

addToTheme() {
  echo "${PICTOADD}" >> $PIX

  if [[ "${#PICSTOADD[@]}" -gt 0 ]]; then
    for P in "${!PICSTOADD[@]}"; do
      echo "${PICSTOADD[$P]}" >> $PIX
    done
  fi
}

newTheme() {
  NEWNAME=$(gum input --header="type a theme name")
  echo "walls.$NEWNAME" >> $THEMES_FILE
  touch "$SYMLINKPATH/walls.$NEWNAME"
  THEME="walls.$NEWNAME"
}

deleteTheme() {
  rm "$SYMLINKPATH/$THEME"
  sed -i "/$THEME/d" $THEMES_FILE
  THEMES=$(< "$THEMES_FILE")
}

main() {
  PROG=$(gum choose "${PROGS[@]}")

  case $PROG in
    "show current wallpapers")
      showCurrentWalls
      ;;

    "set theme")
      setTheme
      ;;

    "edit a theme")
      editTheme
      ;;

    "show themes")
      showThemes
      ;;

    "new theme")
      newTheme
      THEMES=$(< ${SYMLINKPATH}/current-themes.txt)
      ;;

    "delete theme")
      _list_choose_theme
      deleteTheme
      ;;

    "add to existing theme")
      _list_choose_theme
      addToTheme
      ;;

    "add to new theme")
      newTheme
      PIX="${SYMLINKPATH}/${THEME}"
      addToTheme
      ;;

    "quit")
      exit
    ;;
  esac

  main
}

main
